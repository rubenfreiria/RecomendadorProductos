---
export interface Props {
	title: string;
}

const { title } = Astro.props;
---

<!DOCTYPE html>
<html lang="es">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content="Astro description">
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<meta name="view-transition" content="same-origin" />
		<title>{title}</title>
	</head>
	<body>
		<div class="content">
			<slot />
		</div>
	</body>
</html>
<style is:global>
	:root {
		--accent: 124, 58, 237;
		--accent-gradient: linear-gradient(45deg, rgb(var(--accent)), #da62c4 30%, white 60%);
	}
	html {
		font-family: system-ui, sans-serif;
		background-color: #F6F6F6;
	}
	code {
		font-family: Menlo, Monaco, Lucida Console, Liberation Mono, DejaVu Sans Mono,
			Bitstream Vera Sans Mono, Courier New, monospace;
	}
</style>

<!-- <script>
	if(document.startViewTransition){
		window.navigation.addEventListener('navigate', (event) =>{
			const toUrl = new URL(event.destination.url)
	
			//Caso de que la url sea externa
			if (location.origin !== toUrl.origin) return
	
			//Si es el mismo dominio
			event.intercept({
				async handler (){
					//Cargamos la pagina de destino
					const response = await fetch(toUrl.pathname)
					const text = await response.text()
	
					//Nos quedamos solo con el contenido de la etiqueta body
					const data = text.match(/<body[^>]*>([\s\S]*?)<\/body>/i)[1];
					console.log(data);
					
					//Ultilazamos la API de View Transition
					document.startViewTransition(() => {
						//Como tiene que actualizar la vista
						//Scroll hacia arriba del todo
						document.body.innerHTML = data
						document.body.scrollTop = 0
					})
				}
			})
		})
	}
</script> -->

<script src="../js/transition.js"></script>